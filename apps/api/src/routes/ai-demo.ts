/**
 * Simple AI Demo Routes
 * 
 * Basic Cloudflare Workers AI integration for demonstration
 */

import { Hono } from 'hono';
import { authMiddleware } from '../middleware/auth';
import { subdomainMiddleware } from '../middleware/subdomain';
import { validateRequest } from '../middleware/validation';
import { CloudflareAIService } from '../services/workersai.service';
import type { Env } from '../types';
import { z } from 'zod';

const aiRouter = new Hono<Env>();

// Apply auth and tenant middleware to all routes
aiRouter.use('*', authMiddleware);
aiRouter.use('*', subdomainMiddleware);

// Validation schemas
const CategorySuggestionSchema = z.object({
  description: z.string().min(1, 'Description is required'),
  amount: z.number()
});

const FinancialQuestionSchema = z.object({
  question: z.string().min(1, 'Question is required')
});

/**
 * AI Transaction Categorization Demo
 * POST /api/ai/categorize-transaction
 */
aiRouter.post('/categorize-transaction', validateRequest(CategorySuggestionSchema), async c => {
  try {
    const { description, amount } = c.get('validatedData');
    
    // Check if AI binding is available
    if (!c.env.AI) {
      return c.json({
        success: true,
        data: {
          category: 'Other',
          confidence: 0.5,
          reasoning: 'AI service not available - using fallback categorization',
          alternativeCategories: []
        }
      });
    }

    const aiService = new CloudflareAIService(c.env.AI);
    const suggestion = await aiService.categorizeTransaction(description, amount);

    return c.json({
      success: true,
      data: suggestion
    });
  } catch (error) {
    console.error('AI categorization error:', error);
    return c.json(
      {
        success: false,
        error: { code: 'AI_ERROR', message: 'Failed to categorize transaction' }
      },
      500
    );
  }
});

/**
 * AI Financial Assistant Demo
 * POST /api/ai/financial-advice
 */
aiRouter.post('/financial-advice', validateRequest(FinancialQuestionSchema), async c => {
  try {
    const { question } = c.get('validatedData');
    
    // Check if AI binding is available
    if (!c.env.AI) {
      return c.json({
        success: true,
        data: {
          advice: "I'm currently unable to provide personalized advice. For financial guidance, consider consulting with a certified financial planner who can review your specific situation.",
          disclaimer: 'AI service not available - providing general guidance only.'
        }
      });
    }

    const aiService = new CloudflareAIService(c.env.AI);
    
    // Simple context for demo
    const context = {
      monthlyIncome: 5000,
      currentBudgets: [],
      goals: [],
      demographics: {}
    };

    const advice = await aiService.provideFiscalGuidance(question, context);

    return c.json({
      success: true,
      data: {
        advice,
        disclaimer: 'This advice is generated by AI and should not replace professional financial consultation.'
      }
    });
  } catch (error) {
    console.error('AI financial advice error:', error);
    return c.json(
      {
        success: false,
        error: { code: 'AI_ERROR', message: 'Failed to provide financial advice' }
      },
      500
    );
  }
});

/**
 * AI Spending Summary Demo
 * GET /api/ai/spending-summary
 */
aiRouter.get('/spending-summary', async c => {
  try {
    // Check if AI binding is available
    if (!c.env.AI) {
      return c.json({
        success: true,
        data: {
          summary: "Your spending data is being analyzed. In the meantime, focus on tracking your major expense categories like housing, food, and transportation to identify potential savings opportunities.",
          period: new Date().toISOString().slice(0, 7),
          transactionCount: 0
        }
      });
    }

    const aiService = new CloudflareAIService(c.env.AI);
    
    // Demo transactions for AI analysis
    const demoTransactions = [
      {
        id: '1',
        description: 'STARBUCKS #1234',
        amount: -5.47,
        date: new Date().toISOString(),
        category: 'Food & Dining'
      },
      {
        id: '2', 
        description: 'SHELL GAS STATION',
        amount: -45.00,
        date: new Date().toISOString(),
        category: 'Transportation'
      },
      {
        id: '3',
        description: 'GROCERY STORE',
        amount: -120.50,
        date: new Date().toISOString(), 
        category: 'Food & Dining'
      }
    ];

    const summary = await aiService.summarizeMonthlySpending(demoTransactions);

    return c.json({
      success: true,
      data: {
        summary,
        period: new Date().toISOString().slice(0, 7),
        transactionCount: demoTransactions.length
      }
    });
  } catch (error) {
    console.error('AI spending summary error:', error);
    return c.json(
      {
        success: false,
        error: { code: 'AI_ERROR', message: 'Failed to generate spending summary' }
      },
      500
    );
  }
});

/**
 * AI Feature Status
 * GET /api/ai/status
 */
aiRouter.get('/status', async c => {
  return c.json({
    success: true,
    data: {
      aiAvailable: !!c.env.AI,
      features: {
        transactionCategorization: true,
        financialAdvice: true,
        spendingSummary: true,
        anomalyDetection: false, // Not implemented yet
        budgetRecommendations: false // Not implemented yet
      },
      models: {
        textGeneration: '@cf/meta/llama-2-7b-chat-int8',
        textClassification: '@cf/huggingface/distilbert-sst-2-int8'
      }
    }
  });
});

export default aiRouter;